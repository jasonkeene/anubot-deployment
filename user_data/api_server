#cloud-config

coreos:
  update:
    reboot-strategy: reboot
  units:
  - name: sshd.socket
    command: restart
    runtime: true
    content: |+
      [Socket]
      ListenStream=42224
      FreeBind=true
      Accept=yes
  - name: format-var-lib-docker.service
    command: start
    content: |+
      [Unit]
      Before=docker.service var-lib-docker.mount
      ConditionPathExists=!/var/lib/docker.btrfs

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/truncate --size=25G /var/lib/docker.btrfs
      ExecStart=/usr/sbin/mkfs.btrfs /var/lib/docker.btrfs
  - name: var-lib-docker.mount
    enable: true
    content: |+
      [Unit]
      Before=docker.service
      After=format-var-lib-docker.service
      Requires=format-var-lib-docker.service

      [Install]
      RequiredBy=docker.service

      [Mount]
      What=/var/lib/docker.btrfs
      Where=/var/lib/docker
      Type=btrfs
      Options=loop,discard
  - name: partition-do.service
    command: start
    content: |+
      [Unit]
      Description=Partition DO Block Storage

      [Service]
      Type=oneshot
      ExecStart=/root/start-partition-do.sh
      RemainAfterExit=true
      User=root
      TimeoutStartSec=0

      [Install]
      WantedBy=multi-user.target
  - name: mnt-data.mount
    command: start
    content: |+
      [Unit]
      Description=Mount DO Block Storage
      Requires=partition-do.service
      After=partition-do.service

      [Mount]
      What=/dev/disk/by-id/scsi-0DO_Volume_anubot-part1
      Where=/mnt/data
      Type=ext4
      Options=defaults,nofail,discard

      [Install]
      WantedBy=multi-user.target
  - name: create-networks.service
    command: start
    content: |+
      [Unit]
      Description=Create networks needed for containers
      Requires=docker.service
      After=docker.service

      [Service]
      Type=oneshot
      ExecStartPre=-/usr/bin/docker network create backend
      ExecStart=/bin/true
      ExecStop=-/usr/bin/docker network rm backend
      RemainAfterExit=true
      User=core
      TimeoutStartSec=0

      [Install]
      WantedBy=multi-user.target
  - name: nginx.service
    command: start
    content: |+
      [Unit]
      Description=Nginx
      Requires=docker.service
      After=docker.service
      Requires=create-networks.service
      After=create-networks.service
      Requires=concourse-web.service
      After=concourse-web.service
      Requires=api-server.service
      After=api-server.service

      [Service]
      ExecStartPre=-/usr/bin/docker kill nginx
      ExecStartPre=-/usr/bin/docker rm nginx
      ExecStartPre=/usr/bin/docker pull nginx
      ExecStart=/home/core/start-nginx.sh
      ExecStop=/usr/bin/docker stop nginx
      User=core
      TimeoutStartSec=0
      KillMode=none
      EnvironmentFile=/etc/environment

      [Install]
      WantedBy=multi-user.target
  - name: api-server.service
    command: start
    content: |+
      [Unit]
      Description=Anubot API Server
      Requires=docker.service
      After=docker.service
      Requires=mnt-data.mount
      After=mnt-data.mount
      Requires=create-networks.service
      After=create-networks.service

      [Service]
      ExecStartPre=-/usr/bin/docker kill api-server
      ExecStartPre=-/usr/bin/docker rm api-server
      ExecStartPre=/usr/bin/docker pull anubot/api-server
      ExecStart=/home/core/start-api-server.sh
      ExecStop=/usr/bin/docker stop api-server
      User=core
      TimeoutStartSec=0
      KillMode=none
      EnvironmentFile=/etc/environment

      [Install]
      WantedBy=multi-user.target
  - name: postgres.service
    command: start
    content: |+
      [Unit]
      Description=Concourse Postgres
      Requires=docker.service
      After=docker.service
      Requires=mnt-data.mount
      After=mnt-data.mount
      Requires=create-networks.service
      After=create-networks.service

      [Service]
      ExecStartPre=-/usr/bin/docker kill concourse-pg
      ExecStartPre=-/usr/bin/docker rm concourse-pg
      ExecStartPre=/usr/bin/docker pull postgres:9.5
      ExecStart=/home/core/start-postgres.sh
      ExecStop=/usr/bin/docker stop concourse-pg
      User=core
      TimeoutStartSec=0
      KillMode=none
      EnvironmentFile=/etc/environment

      [Install]
      WantedBy=multi-user.target
  - name: concourse-web.service
    command: start
    content: |+
      [Unit]
      Description=Concourse Web
      Requires=docker.service
      After=docker.service
      Requires=postgres.service
      After=postgres.service
      Requires=create-networks.service
      After=create-networks.service

      [Service]
      ExecStartPre=-/usr/bin/docker kill webconcourse-web
      ExecStartPre=-/usr/bin/docker rm concourse-web
      ExecStartPre=/usr/bin/docker pull concourse/concourse
      ExecStart=/home/core/start-concourse-web.sh
      ExecStop=/usr/bin/docker stop concourse-web
      User=core
      TimeoutStartSec=0
      KillMode=none
      EnvironmentFile=/etc/environment

      [Install]
      WantedBy=multi-user.target
  - name: concourse-worker.service
    command: start
    content: |+
      [Unit]
      Description=Concourse Worker
      Requires=docker.service
      After=docker.service
      Requires=concourse-web.service
      After=concourse-web.service
      Requires=create-networks.service
      After=create-networks.service

      [Service]
      ExecStartPre=-/usr/bin/docker kill concourse-worker
      ExecStartPre=-/usr/bin/docker rm concourse-worker
      ExecStartPre=/usr/bin/docker pull concourse/concourse
      ExecStart=/home/core/start-concourse-worker.sh
      ExecStop=/usr/bin/docker stop concourse-worker
      User=core
      TimeoutStartSec=0
      KillMode=none
      EnvironmentFile=/etc/environment

      [Install]
      WantedBy=multi-user.target

write_files:
- path: /root/start-partition-do.sh
  owner: root:root
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    dev_path=/dev/disk/by-id/scsi-0DO_Volume_anubot
    if parted $dev_path print 2>/dev/null |
                grep -i "Partition Table:" |
                grep -i unknown; then
        parted --script $dev_path mklabel gpt
        parted --script -a opt $dev_path mkpart primary ext4 0% 100%
        while ! ls /dev/disk/by-id | grep part1; do
            sleep 1
        done
        mkfs.ext4 $dev_path-part1
        mkdir -p /mnt/data
        mount -t ext4 -o defaults,nofail,discard $dev_path-part1 /mnt/data
        chown -R core:core /mnt/data
    fi
- path: /home/core/start-nginx.sh
  owner: core:core
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    docker run \
        --name nginx \
        --net backend \
        -p 443:443 \
        -v /home/core/certs:/certs:ro \
        -v /home/core/nginx.conf:/etc/nginx/nginx.conf:ro \
        nginx
- path: /home/core/start-api-server.sh
  owner: core:core
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    docker run \
        --name api-server \
        --net backend \
        -v /mnt/data:/data \
        -e "ANUBOT_STORE_BACKEND=bolt" \
        -e "ANUBOT_STORE_BOLT_PATH=/data/anubot.bolt" \
        -e "ANUBOT_DISCORD_OAUTH_CLIENT_ID=${discord_client_id}" \
        -e "ANUBOT_DISCORD_OAUTH_CLIENT_SECRET=${discord_client_secret}" \
        -e "ANUBOT_DISCORD_OAUTH_REDIRECT_URI=${discord_redirect_uri}" \
        -e "ANUBOT_TWITCH_OAUTH_CLIENT_ID=${twitch_client_id}" \
        -e "ANUBOT_TWITCH_OAUTH_CLIENT_SECRET=${twitch_client_secret}" \
        -e "ANUBOT_TWITCH_OAUTH_REDIRECT_URI=${twitch_redirect_uri}" \
        anubot/api-server
- path: /home/core/start-postgres.sh
  owner: core:core
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    docker run \
        --name concourse-pg \
        --net backend \
        -v /mnt/data:/var/lib/postgresql/data \
        -e "POSTGRES_DB=concourse" \
        -e "POSTGRES_USER=concourse" \
        -e "POSTGRES_PASSWORD=${concourse_pg_password}" \
        -e "PGDATA=/var/lib/postgresql/data/concourse-pg" \
        postgres:9.5
- path: /home/core/start-concourse-web.sh
  owner: core:core
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    docker run \
        --name concourse-web \
        --net backend \
        -v /home/core/keys/concourse/web:/concourse-keys:ro \
        -e "CONCOURSE_GITHUB_AUTH_CLIENT_ID=${concourse_github_client_id}" \
        -e "CONCOURSE_GITHUB_AUTH_CLIENT_SECRET=${concourse_github_client_secret}" \
        -e "CONCOURSE_GITHUB_AUTH_USER=jasonkeene" \
        -e "CONCOURSE_EXTERNAL_URL=https://ci.anubot.io/" \
        -e "CONCOURSE_POSTGRES_DATA_SOURCE=postgres://concourse:${concourse_pg_password}@concourse-pg:5432/concourse?sslmode=disable" \
        concourse/concourse web
- path: /home/core/start-concourse-worker.sh
  owner: core:core
  permissions: 0700
  content: |+
    #!/bin/bash -ex
    docker run \
        --name concourse-worker \
        --net backend \
        -v /home/core/keys/concourse/worker:/concourse-keys:ro \
        -e "CONCOURSE_TSA_HOST=concourse-web" \
        --privileged \
        concourse/concourse worker --garden-dns-server 8.8.8.8

- path: /etc/ssh/sshd_config
  permissions: 0600
  owner: root:root
  content: |+
    # Use most defaults for sshd configuration.
    UsePrivilegeSeparation sandbox
    Subsystem sftp internal-sftp

    ClientAliveInterval 180
    UseDNS no
    UsePAM yes
    PrintLastLog no # handled by PAM
    PrintMotd no # handled by PAM

    PermitRootLogin no
    AllowUsers core
    PasswordAuthentication no
    ChallengeResponseAuthentication no
- path: /home/core/nginx.conf
  owner: core:core
  permissions: 0600
  content: |+
    user nginx;
    worker_processes auto;

    pid /var/run/nginx.pid;

    error_log /var/log/nginx/error.log warn;

    events {
        worker_connections 1024;
    }

    http {
        include      /etc/nginx/mime.types;
        default_type application/octet-stream;

        sendfile on;

        keepalive_timeout 65;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;

        upstream api-server {
            server api-server:8080;
        }

        upstream concourse-web {
            server concourse-web:8080;
        }

        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name anubot.io default_server;

            ssl_certificate /certs/anubot.io.combined;
            ssl_certificate_key /certs/anubot.io.key;
            ssl_dhparam /certs/dhparam.pem;
            ssl_session_timeout 1d;
            ssl_session_cache shared:SSL:50m;
            ssl_session_tickets off;

            ssl_protocols TLSv1.2;
            ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
            ssl_prefer_server_ciphers on;

            add_header Strict-Transport-Security max-age=15768000;

            ssl_stapling on;
            ssl_stapling_verify on;

            location / {
                proxy_pass http://api-server;
            }
        }

        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name ci.anubot.io;

            ssl_certificate /certs/ci.anubot.io.combined;
            ssl_certificate_key /certs/ci.anubot.io.key;
            ssl_dhparam /certs/dhparam.pem;
            ssl_session_timeout 1d;
            ssl_session_cache shared:SSL:50m;
            ssl_session_tickets off;

            ssl_protocols TLSv1.2;
            ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
            ssl_prefer_server_ciphers on;

            add_header Strict-Transport-Security max-age=15768000;

            ssl_stapling on;
            ssl_stapling_verify on;

            location / {
                proxy_pass http://concourse-web;
            }
        }
    }

- path: /home/core/certs/anubot.io.key
  owner: core:core
  permissions: 0400
  content: |
    ${tls_key}
- path: /home/core/certs/anubot.io.combined
  owner: core:core
  permissions: 0400
  content: |
    ${tls_cert}
- path: /home/core/certs/ci.anubot.io.key
  owner: core:core
  permissions: 0400
  content: |
    ${ci_tls_key}
- path: /home/core/certs/ci.anubot.io.combined
  owner: core:core
  permissions: 0400
  content: |
    ${ci_tls_cert}
- path: /home/core/certs/dhparam.pem
  owner: core:core
  permissions: 0400
  content: |
    ${tls_dhparam}
- path: /home/core/keys/concourse/web/session_signing_key
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_web_session_signing_key}
- path: /home/core/keys/concourse/web/session_signing_key.pub
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_web_session_signing_key_pub}
- path: /home/core/keys/concourse/web/tsa_host_key
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_web_tsa_host_key}
- path: /home/core/keys/concourse/web/tsa_host_key.pub
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_web_tsa_host_key_pub}
- path: /home/core/keys/concourse/worker/tsa_host_key.pub
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_web_tsa_host_key_pub}
- path: /home/core/keys/concourse/worker/worker_key
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_worker_worker_key}
- path: /home/core/keys/concourse/worker/worker_key.pub
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_worker_worker_key_pub}
- path: /home/core/keys/concourse/web/authorized_worker_keys
  owner: core:core
  permissions: 0400
  content: |
    ${concourse_worker_worker_key_pub}
